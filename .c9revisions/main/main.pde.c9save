{"ts":1366082433758,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#include \"global.h\"\n\nvoid setup()\n{\n  //pin setup\n  pinMode(sensorFrontLeft,INPUT_ANALOG);  //int sensorFrontLeft\n  pinMode(sensorFrontRight,INPUT_ANALOG);  //int sensorFrontRight\n  pinMode(sensorDiagonalLeft,INPUT_ANALOG);  //int sensorDiagonalLeft\n  pinMode(sensorDiagonalRight,INPUT_ANALOG);  //int sensorDiagonalRight\n  pinMode(sensorSideLeft,INPUT_ANALOG);  //int sensorSideLeft\n  pinMode(sensorSideRight,INPUT_ANALOG);  //int sensorSideRight\n\n  pinMode(ledOne,OUTPUT);  //int led\n  pinMode(ledTwo,OUTPUT);  //int led\n  pinMode(ledThree,OUTPUT);  //int led\n\n  pinMode(PWMLeft, PWM);\n  pinMode(motorLeft1, OUTPUT);\n  pinMode(motorLeft2, OUTPUT);\n  pinMode(PWMRight, PWM);\n  pinMode(motorRight1, OUTPUT);\n  pinMode(motorRight2, OUTPUT);  \n  pwmWrite(PWMLeft, 0);\n  pwmWrite(PWMRight, 0);\n\n  pinMode(encoderLeftCLK, INPUT);  //encoder clock pin\n  pinMode(encoderLeftDirc, INPUT);  //encoder direction pin\n  pinMode(encoderRightCLK, INPUT);\n  pinMode(encoderRightDirc, INPUT);\n\n  //global interrupts for sensor\n  Timer2.pause();\n  Timer2.setPrescaleFactor(72);                        // set freq = system(72MHz) / 72000 = 1kHz\n  Timer2.setPeriod(sensorRate);                        // Set up period, 1period = 1 ms\n  Timer2.setChannel1Mode(TIMER_OUTPUT_COMPARE);        // CH1 of timer4 is pin D16\n  Timer2.setCompare(TIMER_CH1, 1);                     // Interrupt for every 1 update\n  Timer2.attachCompare1Interrupt(globalInterrupt);     // the function that will be called\n  Timer2.refresh();                                    // Refresh the timer's count, prescale, and overflow\n  Timer2.resume();                                     // Start the timer counting\n\n  attachInterrupt(encoderLeftCLK, encoderLeftInterrupts, RISING);\n  attachInterrupt(encoderRightCLK, encoderRightInterrupts, RISING);\n}\n\n/*===================  Interrput functions  =======================*/\nvoid globalInterrupt(void)\n{\n  //Sensor\n  sensor.runAllSensor();\n  \n  //Mapping motor handling\n\n\n}\n\nvoid encoderLeftInterrupts(void)\n{\n  if(digitalRead(encoderLeftDirc) == LOW)\n    status.wheelCountLeft++;\n  else\n    status.wheelCountLeft--;\n}\n\nvoid encoderRightInterrupts(void)\n{\n  if(digitalRead(encoderRightDirc) == LOW)\n    status.wheelCountRight++;\n  else\n    status.wheelCountRight--;\n}\n\n\n/*=======================  Void Loop  =========================*/\nvoid loop()\n{\n/*===================  one time instructions  =======================*/\n  //initail setup\n  if(initializeState==false)\n   {\n   //set map size\n   cell[8][8].goal = true;   cell[8][9].goal = true;\n   cell[9][8].goal = true;   cell[9][9].goal = true;\n   \n   status.initialize();\n   maze.initialize();\n   \n   initializeState = true;\n   }\n\n\n/*===================  Encoder testing  =======================*/\n  SerialUSB.print(status.wheelCountRight);\n  SerialUSB.print(\"\\t\");\n  SerialUSB.println(status.wheelCountLeft);\n\n\n/*===================  Turnning test  =======================*/\n/*\n  while(status.frontRightDist > 5)\n    motor.goStraight(5000);\n  motor.stop();\n  delay(1000);\n    motor.turnLeft(3000);\n*/\n\n}\n\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":3066}]],"length":3066}
{"contributors":[],"silentsave":false,"ts":1366082513050,"patch":[[{"diffs":[[0,"d setup()\n{\n"],[1,"test\n"],[0,"  //pin setu"]],"start1":24,"start2":24,"length1":24,"length2":29}]],"length":3071,"saved":false}
{"contributors":[],"silentsave":false,"ts":1366229017524,"patch":[[{"diffs":[[0,"bal.h\"\n\n"],[1,"\n"],[0,"void set"]],"start1":13,"start2":13,"length1":16,"length2":17}]],"length":3072,"saved":false}
